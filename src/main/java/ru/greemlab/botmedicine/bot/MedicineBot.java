package ru.greemlab.botmedicine.bot;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.greemlab.botmedicine.dto.MedicineResponse.MedicineViewList;
import ru.greemlab.botmedicine.service.MedicineService;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Slf4j
@Component
@RequiredArgsConstructor
public class MedicineBot extends TelegramLongPollingBot {

    private final String BOT_NAME = "greem_lab_bot";

    @Getter
    @Value("${app.bot.token}")
    private String botToken;

    private final MedicineService medicineService;

    @Override
    public String getBotUsername() {
        return BOT_NAME;
    }

    @Override
    public void onUpdateReceived(Update update) {

        if (update.hasCallbackQuery()) {
            var callbackQuery = update.getCallbackQuery();
            var callbackData = callbackQuery.getData();
            var callbackQueryId = callbackQuery.getId();
            var chatId = callbackQuery.getMessage().getChatId();
            var messageId = callbackQuery.getMessage().getMessageId();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (toast) —Ç–æ–ª—å–∫–æ —Ç–æ–º—É, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
            try {
                execute(AnswerCallbackQuery.builder()
                        .callbackQueryId(callbackQueryId)
                        .text("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶")
                        .showAlert(false)
                        .build());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {}", e.toString());
            }

            if ("CHECK_RED".equalsIgnoreCase(callbackData)) {
                medicineService.getRedMedicines()
                        .collectList()
                        .subscribe(
                                redList -> {
                                    if (redList.isEmpty()) {
                                        editText(chatId, messageId, "‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.");
                                    } else {
                                        var header = "*–°—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 30 –¥–Ω–µ–π:*\n\n";
                                        var formattedMedicines = redList.stream()
                                                .map(this::formatMedicine)
                                                .collect(Collectors.joining(""));
                                        var message = header + formattedMedicines;
                                        editText(chatId, messageId, message);
                                    }
                                },
                                error -> {
                                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤: {}", error.toString());
                                    editText(chatId, messageId, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.");
                                }
                        );
            }
            return;
        }

        if (update.hasMessage() && update.getMessage().hasText()) {
            var text = update.getMessage().getText().trim();
            var chatId = update.getMessage().getChatId();
            // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
            var userMessageId = update.getMessage().getMessageId();
            var command = text.split("\\s+")[0].toLowerCase();

            switch (command) {
                case "/hi", "/hi@" + BOT_NAME -> {
                    var hi = """
                            üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ üíä.
                            –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start
                            """;
                    sendText(chatId, hi);
                }
                case "/start", "/start@" + BOT_NAME -> {
                    var welcome = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å *—Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏*.";
                    sendTextWithInlineButton(chatId, welcome);
                }
                case "/help", "/help@" + BOT_NAME -> {
                    var help = """
                            *–ö–æ–º–∞–Ω–¥—ã:*
                            
                            /start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                            /hi ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                            /help ‚Äì –ø–æ–º–æ—â—å
                            
                            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
                            """;
                    sendText(chatId, help);
                }
                default -> sendText(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.");
            }
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            scheduleDeleteMessage(chatId, userMessageId);
        }
    }

    private void sendText(Long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .parseMode("Markdown")
                    .build());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.toString());
        }
    }

    private void sendTextWithInlineButton(Long chatId, String text) {
        var button = new InlineKeyboardButton("‚è∞ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏");
        button.setCallbackData("CHECK_RED");

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(button));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(rows);

        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .replyMarkup(markup)
                    .parseMode("Markdown")
                    .build());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ inline-–∫–Ω–æ–ø–∫–∏: {}", e.toString());
        }
    }

    private void editText(Long chatId, Integer messageId, String newText) {
        try {
            execute(EditMessageText.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .text(newText)
                    .parseMode("MarkdownV2")
                    .build());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.toString());
        }
    }

    private String formatMedicine(MedicineViewList m) {
        return String.format("""
                        ‚Ä¢ *%s* \\(%s\\)
                          –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ:
                          ‚û°*%s*
                        """,
                escapeMarkdownV2(m.name()),
                escapeMarkdownV2(m.serialNumber()),
                escapeMarkdownV2(m.expirationDate()));
    }

    private String escapeMarkdownV2(String text) {
        return text.replaceAll("([_*\\[\\]()~`>#+=|{}.!-])", "\\\\$1");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ delaySeconds —Å–µ–∫—É–Ω–¥
    private void scheduleDeleteMessage(Long chatId, Integer messageId) {
        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.schedule(() -> {
            try {
                execute(DeleteMessage.builder()
                        .chatId(chatId.toString())
                        .messageId(messageId)
                        .build());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.toString());
            }
            scheduler.shutdown();
        }, 10, TimeUnit.SECONDS);
    }
}
